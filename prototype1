import React, { useState } from "react";
import { MapContainer, TileLayer, GeoJSON, Marker, Popup } from "react-leaflet";
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import ReactModal from "react-modal";
import { calculateCentroid } from "./utils/calculateCentroid";
import geoData from "./cucei_geo.json";

const cucei_buildings = [
    {
        "type": "Feature",
        "properties": {"building": "X"},
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                    [-103.3272584, 20.6582835],
                    [-103.3272514, 20.6581954],
                    [-103.3272154, 20.6581980],
                    [-103.3266452, 20.6582376],
                    [-103.3266521, 20.6583256],
                    [-103.3272584, 20.6582835]  
                ]
            ]
        }
    },
    {
        "type": "Feature",
        "properties": {"building": "Coordinacion"},
        "geometry": {
            "type": "Polygon",
            "coordinates": [
                [
                  [-103.3260701, 20.6573348],
                  [-103.3263717, 20.6573115],
                  [-103.3263577, 20.6571531],
                  [-103.3262787, 20.6571592],
                  [-103.3262730, 20.6570942],
                  [-103.3260251, 20.6571133],
                  [-103.3260350, 20.6572256],
                  [-103.3260603, 20.6572236],
                  [-103.3260701, 20.6573348]
                ]
              ]
        }
    }
];

const customIcon = new L.Icon({
    iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34]
});

export function CuceiMap() {
    const X = cucei_buildings.find(building => building.properties.building === "X");
    const coordinacion = cucei_buildings.find(building => building.properties.building === "Coordinacion");
    const XCentroid = calculateCentroid(X.geometry.coordinates);
    const coordinacionCentroid = calculateCentroid(coordinacion.geometry.coordinates);

    const [isModalOpen, setIsModalOpen] = useState(false);

    const openModal = () => {
        setIsModalOpen(true);
    }

    const closeModal = () => {
        setIsModalOpen(false);
    }

    // Set the app element for ReactModal
    ReactModal.setAppElement('#root');

    return (
        <MapContainer 
            center={XCentroid}  
            zoom={18}  
            style={{ height: '100vh', width: '100%' }}
        >
            <TileLayer
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />
            <GeoJSON 
                data={cucei_buildings} 
                style={{ color: "#ff00ff", weight: 2, fillOpacity: 0.5 }}
            />
            <GeoJSON data={geoData} />

            <Marker position={XCentroid} icon={customIcon} eventHandlers={{ click: openModal }} />

            <ReactModal
                isOpen={isModalOpen}
                onRequestClose={closeModal}
                contentLabel="Marker Modal"
                style={{
                    content: {
                        top: '50%',
                        left: '50%',
                        right: 'auto',
                        bottom: 'auto',
                        marginRight: '-50%',
                        transform: 'translate(-50%, -50%)',
                        zIndex: '1000', // Ensure modal appears above map
                    },
                    overlay: {
                        zIndex: '1000', // Ensure modal overlay appears above map
                    },
                }}
            >
                <h2>Marker Information</h2>
                <button onClick={closeModal}>Close</button>
                {/* Add more content here */}
            </ReactModal>

            <Marker position={coordinacionCentroid} icon={customIcon}>
                <Popup>
                    Divtic
                </Popup>
            </Marker>
        </MapContainer>
    );
}
